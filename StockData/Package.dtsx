<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/24/2017 5:16:02 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="WORKPC"
  DTS:CreatorName="WORKPC\GEORGE ZHANG"
  DTS:DTSID="{A707470B-63E4-4F06-8DEA-AC7E60E98DAC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.1000.169"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="17"
  DTS:VersionGUID="{A3B7A0E6-1B2D-4401-8631-BDD190158996}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[StockDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E69AD0A9-10D0-4778-A48F-DAA66715C2D4}"
      DTS:ObjectName="StockDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=localhost;User ID=student;Initial Catalog=StockDB;Provider=SQLNCLI11.1;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAt/1GdGKPtk2xq2O7IJ7ApwAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAABphRiNDO9VroDY1TylGzTl1ycwCWGESkNqS8uMDOz1VQAAAAAOgAAAAAIAACAAAAAQCu6l2foeoxLIMRUExVvWM7L4oxPrw8Xk63xvT33yeyAAAAAWgTUKzEB8FEeudEQaHq9IQ5xqvPF/tUKoyQT+8FwSTkAAAADZPieaCLYPL0QLMSzwg7D46GXds/CfYPXsSGHPog4LIZ6jtCSFqk9eymJY2MiShIoCIGBvIGjQxlC2LOLkADbg</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9A59C4E0-28A8-439E-8E34-64A6B0F3B376}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LocalFileFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\Stock\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{06CC280F-2CD2-4E85-A112-FC74152B4517}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="SP">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EA8C1357-3F0B-47AC-90BE-068914F6759A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Symbol">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{74BFCB5B-7267-4E5F-AF74-B7149D30310F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E69AD0A9-10D0-4778-A48F-DAA66715C2D4}"
          SQLTask:SqlStatementSource="SELECT Name FROM SP"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::SP" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{9B6C6CF7-F0FE-4CA1-9241-A9555E04DDE1}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{CF925D47-E8C6-440F-A3F8-EB8F07AF35D2}"
        DTS:ObjectName="{CF925D47-E8C6-440F-A3F8-EB8F07AF35D2}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::SP" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{0C8F3F7C-7626-4BB1-96F8-880946A1AE48}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_f59b951620824bc9975fa5b6b184a59e"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::LocalFileFolder,User::Symbol">
              <ProjectItem
                Name="ST_f59b951620824bc9975fa5b6b184a59e.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{37126F9E-82C5-4356-B72E-C198A4894E91}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f59b951620824bc9975fa5b6b184a59e</RootNamespace>
    <AssemblyName>ST_f59b951620824bc9975fa5b6b184a59e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Historical.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup />
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f59b951620824bc9975fa5b6b184a59e.Properties.Settings.get_Default():ST_f59b951620824bc9975fa5b6b184a59e.Properties.Sett" +
    "ings")]

namespace ST_f59b951620824bc9975fa5b6b184a59e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.IO;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.Net.Security;
using System.Text;
#endregion

namespace ST_f59b951620824bc9975fa5b6b184a59e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            try {
                string symbol = (string)Dts.Variables["User::Symbol"].Value;
                string path = (string)Dts.Variables["User::LocalFileFolder"].Value;

                var task = GetRawHistoricalPrice(symbol, path);
                task.Wait();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                // Logging why download failed
                Dts.Events.FireError(0, "Download File", "Download failed: " + ex.Message, string.Empty, 0);

                // Quit Script Task unsuccesful
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        public static async System.Threading.Tasks.Task GetRawHistoricalPrice(string symbol, string path)
        {

            //first get a valid token from Yahoo Finance
            while (string.IsNullOrEmpty(Token.Cookie) || string.IsNullOrEmpty(Token.Crumb))
            {
                await Token.RefreshAsync().ConfigureAwait(false);
            }

            string csvdata = await Historical.GetRawAsync(symbol, DateTime.Now.AddMonths(-1), DateTime.Now).ConfigureAwait(false);

            //process further
            string localpath = path + symbol + ".csv";
            await WriteTextAsync(localpath, csvdata);
        }

        public static async System.Threading.Tasks.Task WriteTextAsync(string filePath, string text)
        {
            byte[] encodedText = Encoding.Unicode.GetBytes(text);

            using (FileStream sourceStream = new FileStream(filePath,
                FileMode.Append, FileAccess.Write, FileShare.None,
                bufferSize: 4096, useAsync: true))
            {
                await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);
            };
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Historical.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Net;
using System.Text.RegularExpressions;


namespace ST_f59b951620824bc9975fa5b6b184a59e
{
    class HistoryPrice
    {
        public DateTime Date { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
        public double Volume { get; set; }
        public double AdjClose { get; set; }
    }

    class Dividend
    {
        public DateTime Date { get; set; }
        public double Div { get; set; }
    }

    class Token
    {
        #region Public Members

        public static string Cookie { get; set; }
        public static string Crumb { get; set; }

        #endregion Public Members

        #region Private Members

        private static Regex _regexCrumb;

        #endregion Private Members

        #region Public Methods

        /// <summary>
        /// Refresh cookie and crumb value
        /// </summary>
        /// <param name="symbol">Stock ticker symbol</param>
        /// <returns></returns>
        public static async Task<bool> RefreshAsync(string symbol = "SPY")
        {
            try
            {
                Cookie = string.Empty;
                Crumb = string.Empty;

                const string urlScrape = "https://finance.yahoo.com/quote/{0}?p={0}";

                var url = string.Format(urlScrape, symbol);

                var request = (HttpWebRequest)WebRequest.Create(url);

                request.CookieContainer = new CookieContainer();
                request.Method = "GET";

                using (var response = (HttpWebResponse)await request.GetResponseAsync().ConfigureAwait(false))
                {
                    var cookie = response.GetResponseHeader("Set-Cookie").Split(';')[0];

                    var html = string.Empty;

                    using (var stream = response.GetResponseStream())
                    {
                        if (stream != null)
                            html = await new StreamReader(stream).ReadToEndAsync().ConfigureAwait(false);
                    }

                    if (html.Length < 5000) return false;
                    var crumb = await GetCrumbAsync(html).ConfigureAwait(false);

                    if (crumb != null)
                    {
                        Cookie = cookie;
                        Crumb = crumb;
                        Debug.Print("Crumb: '{0}', Cookie: '{1}'", crumb, cookie);
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Print(ex.Message);
            }

            return false;
        }

        #endregion Public Methods

        #region Private Methods

        /// <summary>
        /// Get crumb value from HTML
        /// </summary>
        /// <param name="html">HTML code</param>
        /// <returns></returns>
        private static async Task<string> GetCrumbAsync(string html)
        {
            return await Task.Run(() =>
            {
                string crumb = null;

                try
                {
                    //initialize on first time use
                    if (_regexCrumb == null)
                        _regexCrumb = new Regex("CrumbStore\":{\"crumb\":\"(?<crumb>.+?)\"}",
                            RegexOptions.CultureInvariant | RegexOptions.Compiled);

                    var matches = _regexCrumb.Matches(html);

                    if (matches.Count > 0)
                    {
                        crumb = matches[0].Groups["crumb"].Value;

                        //fixed unicode character 'SOLIDUS'
                        if (crumb.Length != 11)
                            crumb = crumb.Replace("\\u002F", "/");
                    }
                    else
                    {
                        Debug.Print("Regex no match");
                    }

                    //prevent regex memory leak
                    matches = null;
                }
                catch (Exception ex)
                {
                    Debug.Print(ex.Message);
                }

                GC.Collect();
                return crumb;
            }).ConfigureAwait(false);
        }

        #endregion Private Methods
    }

    class Historical
    {
        #region Public Methods

        /// <summary>
        /// Get stock historical price from Yahoo Finance
        /// </summary>
        /// <param name="symbol">Stock ticker symbol</param>
        /// <param name="start">Starting datetime</param>
        /// <param name="end">Ending datetime</param>
        /// <returns>List of history price</returns>
        public static async Task<List<HistoryPrice>> GetPriceAsync(string symbol, DateTime start, DateTime end)
        {
            try
            {
                var csvData = await GetRawAsync(symbol, start, end).ConfigureAwait(false);
                if (csvData != null) return await ParsePriceAsync(csvData).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Debug.Print(ex.Message);
            }

            return new List<HistoryPrice>();
        }

        /// <summary>
        /// Get stock historical dividends from Yahoo Finance
        /// </summary>
        /// <param name="symbol">Stock ticker symbol</param>
        /// <param name="start">Starting datetime</param>
        /// <param name="end">Ending datetime</param>
        /// <returns>List of dividends</returns>
        public static async Task<List<Dividend>> GetDividendAsync(string symbol, DateTime start, DateTime end)
        {
            try
            {
                var csvData = await GetRawAsync(symbol, start, end, "div").ConfigureAwait(false);
                if (csvData != null) return await ParseDivAsync(csvData).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Debug.Print(ex.Message);
            }
            return new List<Dividend>();
        }

        /// <summary>
        /// Get raw stock historical price from Yahoo Finance
        /// </summary>
        /// <param name="symbol">Stock ticker symbol</param>
        /// <param name="start">Starting datetime</param>
        /// <param name="end">Ending datetime</param>
        /// <param name="eventType">Event type (e.g: history, div)</param>
        /// <returns>Raw history price string</returns>
        public static async Task<string> GetRawAsync(string symbol, DateTime start, DateTime end, string eventType = "history")
        {
            string csvData = null;

            try
            {
                var url = "https://query1.finance.yahoo.com/v7/finance/download/{0}?period1={1}&period2={2}&interval=1d&events={3}&crumb={4}";

                //if no token found, refresh it
                if (string.IsNullOrEmpty(Token.Cookie) || string.IsNullOrEmpty(Token.Crumb))
                {
                    if (!await Token.RefreshAsync(symbol).ConfigureAwait(false))
                        return await GetRawAsync(symbol, start, end).ConfigureAwait(false);
                }

                url = string.Format(url, symbol, Math.Round(DateTimeToUnixTimestamp(start), 0), Math.Round(DateTimeToUnixTimestamp(end), 0), eventType, Token.Crumb);

                using (var wc = new WebClient())
                {
                    wc.Headers.Add(HttpRequestHeader.Cookie, Token.Cookie);
                    csvData = await wc.DownloadStringTaskAsync(url).ConfigureAwait(false);
                }
            }
            catch (WebException webEx)
            {
                var response = (HttpWebResponse)webEx.Response;

                //Re-fetching token
                if (response.StatusCode != HttpStatusCode.Unauthorized ||
                    response.StatusCode != HttpStatusCode.NotFound)
                    throw;
                Debug.Print(webEx.Message);
                Token.Cookie = "";
                Token.Crumb = "";
                Debug.Print("Re-fetch token");
                return await GetRawAsync(symbol, start, end).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Debug.Print(ex.Message);
            }

            return csvData;
        }

        #endregion Public Methods

        #region Private Methods

        /// <summary>
        /// Parse raw historical price data into list
        /// </summary>
        /// <param name="csvData"></param>
        /// <returns>List of historical price</returns>
        private static async Task<List<HistoryPrice>> ParsePriceAsync(string csvData)
        {
            return await Task.Run(() =>
            {
                var lst = new List<HistoryPrice>();

                try
                {
                    var rows = csvData.Split(Convert.ToChar(10));

                    //row(0) was ignored because is column names
                    //data is read from oldest to latest
                    for (var i = 1; i <= rows.Length - 1; i++)
                    {
                        var row = rows[i];
                        if (string.IsNullOrEmpty(row)) continue;

                        var cols = row.Split(',');
                        if (cols[1] == "null") continue;

                        var itm = new HistoryPrice
                        {
                            Date = DateTime.Parse(cols[0]),
                            Open = Convert.ToDouble(cols[1]),
                            High = Convert.ToDouble(cols[2]),
                            Low = Convert.ToDouble(cols[3]),
                            Close = Convert.ToDouble(cols[4]),
                            AdjClose = Convert.ToDouble(cols[5])
                        };

                        //fixed issue in some currencies quote (e.g: SGDAUD=X)
                        if (cols[6] != "null") itm.Volume = Convert.ToDouble(cols[6]);

                        lst.Add(itm);
                    }
                }
                catch (Exception ex)
                {
                    Debug.Print(ex.Message);
                }

                return lst;
            }).ConfigureAwait(false);
        }

        /// <summary>
        /// Parse raw dividend data into list
        /// </summary>
        /// <param name="csvData"></param>
        /// <returns>List of dividends</returns>
        private static async Task<List<Dividend>> ParseDivAsync(string csvData)
        {
            return await Task.Run(() =>
            {
                var lst = new List<Dividend>();
                try
                {
                    var rows = csvData.Split(Convert.ToChar(10));

                    //row(0) was ignored because is column names
                    //data is read from oldest to latest
                    for (var i = 1; i <= rows.Length - 1; i++)
                    {
                        var row = rows[i];
                        if (string.IsNullOrEmpty(row)) continue;

                        var cols = row.Split(',');
                        if (cols[1] == "null") continue;

                        var itm = new Dividend
                        {
                            Date = DateTime.Parse(cols[0]),
                            Div = Convert.ToDouble(cols[1])
                        };

                        lst.Add(itm);
                    }
                }
                catch (Exception ex)
                {
                    Debug.Print(ex.Message);
                }

                return lst;
            }).ConfigureAwait(false);
        }

        #region Unix Timestamp Converter

        //credits to Dmitry Fedorkov
        //reference http://stackoverflow.com/questions/249760/how-to-convert-a-unix-timestamp-to-datetime-and-vice-versa
        private static double DateTimeToUnixTimestamp(DateTime dateTime)
        {
            //Unix timestamp Is seconds past epoch
            return (dateTime.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
        }

        #endregion Unix Timestamp Converter

        #endregion Private Methods
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_f59b951620824bc9975fa5b6b184a59e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_f59b951620824bc9975fa5b6b184a59e</msb:DisplayName>
		<msb:ProjectId>{C490E0A2-9A8F-4843-9382-629C50C560FD}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f59b951620824bc9975fa5b6b184a59e.csproj"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Historical.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f59b951620824bc9975fa5b6b184a59e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_f59b951620824bc9975fa5b6b184a59e")]
[assembly: AssemblyCopyright("Copyright @  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f59b951620824bc9975fa5b6b184a59e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f59b951620824bc9975fa5b6b184a59e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f59b951620824bc9975fa5b6b184a59e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_f59b951620824bc9975fa5b6b184a59e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f59b951620824bc9975fa5b6b184a59e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_f59b951620824bc9975fa5b6b184a59e.dll">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
BgAZC5EKCgD+BsgJCgBqB8gJCgB0BnwKBgBmBDgKDgC2CYIJEgA3DZwFEgA4BZwFBgAdCTgKDgDo
C4IJBgBWBTgKBgDlDrUKCgCIDggOCgCEDggOCgDYCwgOBgBbCzgKBgCECxsCBgCRCxsCBgBBBTgK
CgCTDXQNCgAkCXQNCgDXCnQNCgBTC3QNCgBQBnQNBgAYAjgKBgAMATgKBgA8CTgKBgBPBTgKCgDn
CggOCgByCwgOCgDyBAgOBgAlC1gMBgB8DjgKBgD6CJwOBgABBRsCBgC3DRsCBgAWBhsCAAAAAA8C
AAAAAAEAAQAAABAAxgSEBDUAAQABAAAAEABdBIQENQAIABAAAAAQAFkKhAQ1AAoAFQAAABAAqwmE
BDUADQAcAAEAEABxCoQEkQANACMAAAAQAKAMBA01AA0AJwAAARAASg0EDb0ADwArAAMBEAD8AQAA
VQAQAC4AAwEQABYAAAA1ABgAMAADARAAAQAAAFUAGQAyAAMBEACUAAAAVQAdADQAAwEQANIAAABV
ACQANgADARAAigEAAFUAKwA4AAMBEAAsAAAANQA4ADoAAwEQAMsBAABVADkAPAADARAAQQAAADUA
PQA+AAMBEADoAQAAVQA+AEAAAwEAANINAACdAEIAQgADARAA6QAAAFUARQBCAAMBEAB1AQAAVQBM
AEQAAQDxA5cFAQAdBJsFAQAHBJsFAQBIBJsFAQDAA5sFAQCoA5sFAQDXA5sFAQDxA5cFAQAzBJsF
EQCQAzUBEQB5AzUBEQBxAp4FEQBECqIFEQBABqcFEQDTBKwFBgATB7AFBgCzC7MFBgALCjUBAQDF
ALoFAQBoATUBAQC8Ab4FAQAFAcIFAQCcAcoFBgAGCjUBBgATB7AFBgCzC9EFBgAGCjUBAQAFAcoF
BgATB7AFBgCzC9gFBgALCjUBBgB2DpcFBgBiBJcFAQAFAcoFAQCcAeQFBgATB7AFBgCzC/AFBgAL
CjUBBgB2DpcFBgBiBJcFAQAFAcoFAQCcAfwFBgATB7AFBgCzC9EFBgALCjUBBgB2DpcFBgBiBJcF
AQCoADUBBgAMBjUBAQBfAQgGAQCuATUBAQBUAQ0GAQCjAbAFAQAFARAGAQCcAcoFBgBMAjUBBgAT
B7AFBgCzC9gFBgBMAjUBAQAFAeQFBgBMAjUBBgATB7AFBgCzC/AFBgBMAjUBAQAFAfwFBgZEArAF
VoDCDRcGVoAgBhcGBgATB7AFBgCzCxsGBgALCjUBBgBKCTUBAQAFARAGAQCcAcoFAQDhASAGBgAT
B7AFBgCzCxsGBgCoDjUBBgBBCTUBAQCyACUGAQAFASAGUCAAAAAAhgjlBucAAQBYIAAAAACGCO4G
KgYBAGEgAAAAAIYIXwoEAQIAaSAAAAAAhghoCjAGAgByIAAAAACGCCoJBAEDAHogAAAAAIYIMwkw
BgMAgyAAAAAAhgi9DgQBBACLIAAAAACGCMUOMAYEAJQgAAAAAIYIqQYEAQUAnCAAAAAAhgizBjAG
BQClIAAAAACGCLwFBAEGAK0gAAAAAIYIxwUwBgYAtiAAAAAAhgi9BgQBBwC+IAAAAACGCMoGMAYH
AMcgAAAAAIYYJwwGAAgAzyAAAAAAhgjlBucACADXIAAAAACGCO4GKgYIAOAgAAAAAIYIrQ4EAQkA
6CAAAAAAhgi1DjAGCQDHIAAAAACGGCcMBgAKAPEgAAAAAJYIIgU1BgoA+CAAAAAAlggtBTkGCgAA
IQAAAACWCF0CNQYLAAchAAAAAJYIZwI5BgsAECEAAAAAlgAAAz4GDABYIQAAAACRAJgCRwYNAMcg
AAAAAIYYJwwGAA4AoCEAAAAAlgDWAlAGDgD4IQAAAACWALUCYgYRAFAiAAAAAJYAQgN0BhQAsCIA
AAAAkQDGAoIGGAD4IgAAAACRADQDkAYZAEAjAAAAAJEAOwueBhoAxyAAAAAAhhgnDAYAGwB0IwAA
AACGAHcKBgAbACgkAAAAAJYAsASkBhsAeCQAAAAAlgAlA6QGHQDFJAAAAACGGCcMBgAfAMcgAAAA
AIMYJwwGAB8AzSQAAAAAkwjAC6wGHwD5JAAAAACTCCgGsgYfAAAlAAAAAJMINAa4Bh8ACCUAAAAA
lggtDr8GIAAPJQAAAACGGCcMBgAgABclAAAAAJEYLQx7AiAAJCUAAAAA4QGTDgYAIAB0KAAAAADh
AeUFGwAgAMcgAAAAAIYYJwwGACEAhCgAAAAAgwBWACsBIQAcKQAAAADhAZMOBgAhAPgpAAAAAOEB
5QUbACEACCoAAAAA4QGTDgYAIgCUKwAAAADhAeUFGwAiAKQrAAAAAOEBkw4GACMAMC0AAAAA4QHl
BRsAIwBALQAAAADhAZMOBgAkAKAxAAAAAOEB5QUbACQAxyAAAAAAhhgnDAYAJQCwMQAAAACDAGoA
xAYlAMwyAAAAAOEBkw4GACUAqDMAAAAA4QHlBRsAJQDHIAAAAACGGCcMBgAmALgzAAAAAIMAgADN
BiYAbDQAAAAA4QGTDgYAJgBINQAAAADhAeUFGwAmAFg1AAAAAOEBkw4GACcAYDcAAAAA4QHlBRsA
JwBwNwAAAADhAZMOBgAoAIw4AAAAAOEB5QUbACgAAAABAPQIAAABAPQIAAABAPQIAAABAPQIAAAB
APQIAAABAPQIAAABAPQIAAABAPQIAAABAPQIAAABAPQIAAABAPQIEBABAAsKAAABAAYKAAABAAsK
AAACAHYOAAADAGIEAAABAAsKAAACAHYOAAADAGIEAAABAAsKAAACAHYOAAADAGIEEBAEAAwGAAAB
AEwCAAABAEwCAAABAIMFAAABAAsKAAACAEoJAAABAEEJAAACAKgOAAABAPQIAAABAPUFAAABAPUF
AAABAPUFAAABAPUFAAABAPUFAAABAPUFAAABAPUFAAABAPUFAAABAPUFCQBZAAsAWQAMAFkADQBZ
AA4AWQAQAFkAEgBZABQAWQAVAFkACQAnDAEAEQAnDAYAGQAnDAoAKQAnDBAAMQAnDBAAOQAnDBAA
QQAnDBAASQAnDBAAUQAnDBAAWQAnDBAAYQAnDBAAcQAnDAYAkQAnDBUAsQCTDgYAsQDlBRsA6QAn
DAYAGQEnDAYAUQEnDAYAcQEnDCEAaQAnDAYADAD3BjgADABwDkEADABaCU4AFAD3BjgAFABwDkEA
FABaCU4AHAD3BjgAHABwDkEAHABaCU4AJAD3BjgAJABwDkEAJABaCU4AeQCMBecAeQAnDOwAeQCm
CvoAAQFHDAQBIQHKDQ4BiQEzDRQBkQEvChoBmQHqCCEBKQETDgYAiQE5DgEAiQHgDSUB0QAWBSsB
oQHrDS8BoQEQDzUBqQEdDDgBMQH3BkkBMQFwDkEAMQFaCVQBIQEnDAYAiQBoBWcBiQDhDm8BWQEn
DHUBeQEnDAYAoQHyDZ4BwQH3BqQB0QEnDAYAyQHUC6sBwQF5BBAAwQHkArIBLAAYDsIBNAASDNMB
PABpA+MBDABSA+cBPABIDv0B4QBgCwICoQEnDgcCuQAdCg4C4QEnDBMC6QGmAhkCRAAYDsIBTAAS
DNMBVABpA+MBVABIDv0B8QHXBgYAoQFPCT0CDAAIC0ECDABSDkcCDADlBRsAgQAnDFMCgQD8DFsC
8QBmDj0C8QAvCmECAQKgDWgCCQIvCm4CGQLqCCsBoQGoBHUCIQIADnsCXAAnDJcCKQEVC50CFABS
A+cBFAAIC0ECFABSDkcCFADlBRsAHABSA+cBZAAYDsIBbAASDNMBdABpA+MBdABIDv0BfAAnDAYA
HAAIC0ECHABSDkcCHADlBRsAJABSA+cBhAAYDsIBjAASDNMBlABpA+MBlABIDv0BnAAnDAYAJAAI
C0ECJABSDkcCJADlBRsAoQEID7YDpAAYDsIBrAASDNMBtABpA+MBtABIDv0BMQJzBOEDoQHyDecD
EQEnDAYAEQGrDe4DQQJOA/QDEQENA/wDCQGMBgUE4QDjBAoEWQJQBhAEWQLVDgYAYQJZCykEoQHu
Di4EeQDfBjQEYQJNBToEoQH6Di4EfABOA0cCvAAnDJcCnABOA0cCxAAnDJcCMQFSA+cBeQDNDgIF
eQBTDQcFoQHrDRcFKQESDB4FQQFpA+MBQQFIDgYAMQEIC0ECMQFSDgYAMQHlBRsAaQIKBTcFaQJB
DT0FSQEnDEMF2QD1AlMFDgAxAIEFDgBdAIgFCAAMAXcFCAAQAXwFIABjAHwFIQBjAHwFLgALAPQG
LgATAP0GLgAbABwHLgAjACUHLgArAE4HLgAzAE4HLgA7AE4HLgBDACUHLgBLAFQHLgBTAE4HLgBb
AGsHQABjAHwFQQBjAHwFYABjAHwFYQBjAHwFgABjAHwFgQBjAHwFoABjAHwFoQBjAHwFwABjAHwF
wQBjAHwFwwCLAHwF4ABjAHwF4QBjAHwF4wCTAHwFAAFjAHwFAQFjAHwFIAFjAHwFIQFjAHwFIwFj
AHwFQAFjAHwFQQFjAHwFQwFjAHwFYAFjAHwFYQFjAHwFYwFjAHwFgAFjAHwFgwFjAHwFiQGbABwH
oAFjAHwFowFjAHwFqQGbABwHwAFjAHwFwwFjAHwF4QFjAHwF4wFjAHwFAAJjAHwFAwJjAHwFIAJj
AHwFIwJjAHwFQAJjAHwFQwJjAHwFYAJjAHwFgwJjAHwFoAJjAHwFowJjAHwFwAJjAHwF4AJjAHwF
AANjAHwFIANrALUHQANrAPcHgANrADsIoANrAIMIwANrAM4I4ANrABQJAARrAF4JgARrAKYJoARr
APYJ4AWDAHwFYAaDAHwFoAaDAHwF4AaDAHwFIAeDAHwFoAeDAHwFIAiDAHwFYAiDAHwFoAiDAHwF
KABXAGwAiwCqALkAzQDhAAgBQQFaAX0BTQJ/ArwCKAOUAxgEPwSDBJQE2AQsBQIAAQADAAgABAAK
AAcADAAIAA4AAADyBtYGAABsCtsGAAA3CdsGAADJDtsGAADRBtsGAADLBdsGAADOBtsGAADyBtYG
AAC5DtsGAAAxBd8GAAB3At8GAADEC+MGAABIBukGAAAxDu8GAgABAAMAAQACAAMAAgADAAUAAQAE
AAUAAgAFAAcAAQAGAAcAAgAHAAkAAQAIAAkAAgAJAAsAAQAKAAsAAgALAA0AAQAMAA0AAgANAA8A
AQAOAA8AAgAQABEAAQARABEAAgASABMAAQATABMAAgAVABUAAQAWABUAAgAXABcAAQAYABcAAgAo
ABkAAgApABsAAQAqABsAAgArAB0ACQBcAB0ACQBeAB8ACwBkAB0ACwBmAB8ADABoAB0ADABqAB8A
DQBsAB0ADQBuAB8ADgBwAB0ADgByAB8AEAB4AB0AEAB6AB8AEgCAAB0AEgCCAB8AFACEAB0AFACG
AB8AFQCIAB0AFQCKAB8AMgBhAHsAmgC7AcwB3AEhAicCLQKQAvEC/AIHAyEDXQNoA3MDjQO7A8ED
xwNfBLQEBIAAAAEAAACJGRmIAAAAAAAAhAQAAAQAAAAAAAAAAAAAAGUFVAIAAAAABAAAAAAAAAAA
AAAAZQU4CgAAAAAOAAAAAAAAAAAAAABuBWMJAAAAAA4AAAAAAAAAAAAAAG4FJQIAAAAAAAAAAAEA
AACqDAAACQAEAAoABAALAAQADAAFAA0ABQAOAAUADwAFABAABQARAAUAEgAFABMABgAUAAYAFQAG
AC0ASQAzAGcAOQCGAD8ApQAzALQAOQDIAD8A3ABjAE8BYwBiAYMA8gGDADMCtwCuArkAsgLBAOcC
wQASA9MAUwPTAH4DuQDNA7kA1wO3AGsEwQB0BLcAwATTAMkEFQH4BBUBDQUVASQFFQFdBQAAAAAA
PEdldENydW1iQXN5bmM+ZF9fMTAAPD5jX19EaXNwbGF5Q2xhc3MxMF8wADw+Y19fRGlzcGxheUNs
YXNzM18wADw+Y19fRGlzcGxheUNsYXNzNF8wADxHZXRDcnVtYkFzeW5jPmJfXzAAPFBhcnNlUHJp
Y2VBc3luYz5iX18wADxQYXJzZURpdkFzeW5jPmJfXzAAPEdldFByaWNlQXN5bmM+ZF9fMAA8dXJs
PjVfXzEAPHNvdXJjZVN0cmVhbT41X18xADxzdHJlYW0+NV9fMQA8R2V0RGl2aWRlbmRBc3luYz5k
X18xADxHZXRSYXdIaXN0b3JpY2FsUHJpY2U+ZF9fMQA8PnVfXzEARnVuY2AxAENvbmZpZ3VyZWRU
YXNrQXdhaXRhYmxlYDEAVGFza2AxAEFzeW5jVGFza01ldGhvZEJ1aWxkZXJgMQBMaXN0YDEAPD43
X193cmFwMQA8d2M+NV9fMgA8Y29va2llPjVfXzIAPFdyaXRlVGV4dEFzeW5jPmRfXzIAPEdldFJh
d0FzeW5jPmRfXzIAPD51X18yADw+N19fd3JhcDIAPGNzdkRhdGE+NV9fMwA8cmVzcG9uc2U+NV9f
MwA8UGFyc2VQcmljZUFzeW5jPmRfXzMAPD51X18zADxQYXJzZURpdkFzeW5jPmRfXzQAPFJlZnJl
c2hBc3luYz5kX185ADxNb2R1bGU+AEdDAFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1h
bmFnZWREVFMAdmFsdWVfXwBjc3ZEYXRhAG1zY29ybGliAGdldF9DcnVtYgBzZXRfQ3J1bWIAX3Jl
Z2V4Q3J1bWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAR2V0Q3J1bWJBc3luYwBSZWFkVG9F
bmRBc3luYwBHZXREaXZpZGVuZEFzeW5jAFBhcnNlUHJpY2VBc3luYwBHZXRQcmljZUFzeW5jAEdl
dFJlc3BvbnNlQXN5bmMAV3JpdGVBc3luYwBSZWZyZXNoQXN5bmMARG93bmxvYWRTdHJpbmdUYXNr
QXN5bmMAV3JpdGVUZXh0QXN5bmMAUGFyc2VEaXZBc3luYwBHZXRSYXdBc3luYwBBZGQAQXdhaXRV
bnNhZmVPbkNvbXBsZXRlZABnZXRfSXNDb21wbGV0ZWQAPENydW1iPmtfX0JhY2tpbmdGaWVsZAA8
Q29va2llPmtfX0JhY2tpbmdGaWVsZAA8Vm9sdW1lPmtfX0JhY2tpbmdGaWVsZAA8Q2xvc2U+a19f
QmFja2luZ0ZpZWxkADxBZGpDbG9zZT5rX19CYWNraW5nRmllbGQAPERhdGU+a19fQmFja2luZ0Zp
ZWxkADxIaWdoPmtfX0JhY2tpbmdGaWVsZAA8T3Blbj5rX19CYWNraW5nRmllbGQAPERpdj5rX19C
YWNraW5nRmllbGQAPExvdz5rX19CYWNraW5nRmllbGQARGl2aWRlbmQARGF0ZVRpbWVLaW5kAFJv
dW5kAHNldF9NZXRob2QAU1RfZjU5Yjk1MTYyMDgyNGJjOTk3NWZhNWI2YjE4NGE1OWUAUmVwbGFj
ZQBHZXRSYXdIaXN0b3JpY2FsUHJpY2UASGlzdG9yeVByaWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRf
U3RhdHVzQ29kZQBIdHRwU3RhdHVzQ29kZQBGaWxlTW9kZQBnZXRfVW5pY29kZQBnZXRfTWVzc2Fn
ZQBnZXRfQ29va2llAHNldF9Db29raWUAVmFyaWFibGUASURpc3Bvc2FibGUAVG9Eb3VibGUAUnVu
dGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARGF0ZVRpbWUAZGF0ZVRpbWUAVG9Vbml2
ZXJzYWxUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAZ2V0X1ZvbHVtZQBzZXRf
Vm9sdW1lAElBc3luY1N0YXRlTWFjaGluZQBTZXRTdGF0ZU1hY2hpbmUAc3RhdGVNYWNoaW5lAFZh
bHVlVHlwZQBldmVudFR5cGUARmlsZVNoYXJlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1
cmUAcmVzb3VyY2VDdWx0dXJlAENhcHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAGdldF9SZXNwb25zZQBIdHRwV2ViUmVzcG9uc2UAZ2V0X0Ns
b3NlAHNldF9DbG9zZQBnZXRfQWRqQ2xvc2UAc2V0X0FkakNsb3NlAERpc3Bvc2UAUGFyc2UAZ2V0
X0RhdGUAc2V0X0RhdGUAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlADw+MV9fc3RhdGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzeW5jU3RhdGVNYWNoaW5lQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBEZWJ1Z2dlckhpZGRlbkF0dHJpYnV0ZQBBc3Nl
bWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBB
c3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1
dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRl
AGdldF9WYWx1ZQB2YWx1ZQBFbmNvZGluZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFN0cmlu
ZwBNYXRjaABnZXRfSGlnaABzZXRfSGlnaABNYXRoAGZpbGVQYXRoAHBhdGgAZ2V0X0xlbmd0aABn
ZXRfVGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuVGFza3MuU2NyaXB0VGFzawBIaXN0b3JpY2FsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3Rl
bS5Db21wb25lbnRNb2RlbABTVF9mNTliOTUxNjIwODI0YmM5OTc1ZmE1YjZiMTg0YTU5ZS5kbGwA
aHRtbABzeW1ib2wARmlsZVN0cmVhbQBHZXRSZXNwb25zZVN0cmVhbQBnZXRfSXRlbQBTeXN0ZW0A
RW51bQByZXNvdXJjZU1hbgBUaW1lU3BhbgBUb2tlbgBnZXRfT3BlbgBzZXRfT3BlbgBTY3JpcHRN
YWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAG9wX1N1YnRyYWN0
aW9uAFN5c3RlbS5SZWZsZWN0aW9uAE1hdGNoQ29sbGVjdGlvbgBHcm91cENvbGxlY3Rpb24AV2Vi
SGVhZGVyQ29sbGVjdGlvbgBXZWJFeGNlcHRpb24AU2V0RXhjZXB0aW9uAFJ1bgBDdWx0dXJlSW5m
bwBFeGNlcHRpb25EaXNwYXRjaEluZm8ARGF0ZVRpbWVUb1VuaXhUaW1lc3RhbXAAR3JvdXAAVG9D
aGFyAEdldFJlc3BvbnNlSGVhZGVyAEh0dHBSZXF1ZXN0SGVhZGVyAFN0cmVhbVJlYWRlcgBUZXh0
UmVhZGVyAEFzeW5jVGFza01ldGhvZEJ1aWxkZXIAPD50X19idWlsZGVyAGdldF9SZXNvdXJjZU1h
bmFnZXIAc2V0X0Nvb2tpZUNvbnRhaW5lcgBFdmVudHNPYmplY3RXcmFwcGVyAENvbmZpZ3VyZWRU
YXNrQXdhaXRlcgBHZXRBd2FpdGVyAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdu
b3N0aWNzAGdldF9Ub3RhbFNlY29uZHMAU3lzdGVtLlJ1bnRpbWUuRXhjZXB0aW9uU2VydmljZXMA
U3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2Y1OWI5
NTE2MjA4MjRiYzk5NzVmYTViNmIxODRhNTllLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNl
cwBEZWJ1Z2dpbmdNb2RlcwBNYXRjaGVzAFNUX2Y1OWI5NTE2MjA4MjRiYzk5NzVmYTViNmIxODRh
NTllLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBHZXRCeXRlcwBTZXR0aW5ncwBBZGRNb250aHMA
U3lzdGVtLlRocmVhZGluZy5UYXNrcwBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAUmVn
ZXhPcHRpb25zAGdldF9Hcm91cHMAZ2V0X0hlYWRlcnMARmlsZUFjY2VzcwBTdWNjZXNzAGdldF9E
dHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAENvbmNhdABGb3JtYXQAT2JqZWN0AENvbGxlY3QA
U3lzdGVtLk5ldABXYWl0AENvbmZpZ3VyZUF3YWl0AFNwbGl0AGdldF9EZWZhdWx0AHNldF9UYXNr
UmVzdWx0AEdldFJlc3VsdABTZXRSZXN1bHQAV2ViQ2xpZW50AGdldF9Db3VudABTdGFydABzdGFy
dABDb252ZXJ0AEh0dHBXZWJSZXF1ZXN0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHRleHQAZ2V0X0Rp
dgBzZXRfRGl2AGdldF9Mb3cAc2V0X0xvdwBnZXRfTm93AFRocm93AFJlZ2V4AGdldF9Bc3NlbWJs
eQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AElzTnVsbE9yRW1wdHkAAAAAGVUAcwBlAHIAOgA6
AFMAeQBtAGIAbwBsAAArVQBzAGUAcgA6ADoATABvAGMAYQBsAEYAaQBsAGUARgBvAGwAZABlAHIA
ABtEAG8AdwBuAGwAbwBhAGQAIABGAGkAbABlAAAjRABvAHcAbgBsAG8AYQBkACAAZgBhAGkAbABl
AGQAOgAgAABxUwBUAF8AZgA1ADkAYgA5ADUAMQA2ADIAMAA4ADIANABiAGMAOQA5ADcANQBmAGEA
NQBiADYAYgAxADgANABhADUAOQBlAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAABTaAB0AHQAcABzADoALwAvAGYAaQBuAGEAbgBjAGUALgB5AGEAaABvAG8ALgBjAG8A
bQAvAHEAdQBvAHQAZQAvAHsAMAB9AD8AcAA9AHsAMAB9AAAHRwBFAFQAABVTAGUAdAAtAEMAbwBv
AGsAaQBlAAFLQwByAHUAbQBiAFMAdABvAHIAZQAiADoAewAiAGMAcgB1AG0AYgAiADoAIgAoAD8A
PABjAHIAdQBtAGIAPgAuACsAPwApACIAfQAAC2MAcgB1AG0AYgAADVwAdQAwADAAMgBGAAADLwAA
D2gAaQBzAHQAbwByAHkAAAdkAGkAdgAAgONoAHQAdABwAHMAOgAvAC8AcQB1AGUAcgB5ADEALgBm
AGkAbgBhAG4AYwBlAC4AeQBhAGgAbwBvAC4AYwBvAG0ALwB2ADcALwBmAGkAbgBhAG4AYwBlAC8A
ZABvAHcAbgBsAG8AYQBkAC8AewAwAH0APwBwAGUAcgBpAG8AZAAxAD0AewAxAH0AJgBwAGUAcgBp
AG8AZAAyAD0AewAyAH0AJgBpAG4AdABlAHIAdgBhAGwAPQAxAGQAJgBlAHYAZQBuAHQAcwA9AHsA
MwB9ACYAYwByAHUAbQBiAD0AewA0AH0AAAEACW4AdQBsAGwAAAdTAFAAWQAACS4AYwBzAHYAAJC0
cQigZPdFnM48/qvhOyEABCABAQgDIAABBSABARERBCABAQ4FIAEBEkUFIAEBElkGIAEBEYC1CQcC
ESQVEVEBAgUVEVEBAggAABURUQETAAcwAQEBEB4ABAoBESQIIAAVEk0BEwAJBwIRLBURUQEOBRUR
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
PXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNUEBADxTVF9m
NTliOTUxNjIwODI0YmM5OTc1ZmE1YjZiMTg0YTU5ZS5Ub2tlbis8UmVmcmVzaEFzeW5jPmRfXzkA
AEMBAD5TVF9mNTliOTUxNjIwODI0YmM5OTc1ZmE1YjZiMTg0YTU5ZS5Ub2tlbis8R2V0Q3J1bWJB
c3luYz5kX18xMAAARwEAQlNUX2Y1OWI5NTE2MjA4MjRiYzk5NzVmYTViNmIxODRhNTllLkhpc3Rv
cmljYWwrPEdldFByaWNlQXN5bmM+ZF9fMAAASgEARVNUX2Y1OWI5NTE2MjA4MjRiYzk5NzVmYTVi
NmIxODRhNTllLkhpc3RvcmljYWwrPEdldERpdmlkZW5kQXN5bmM+ZF9fMQAARQEAQFNUX2Y1OWI5
NTE2MjA4MjRiYzk5NzVmYTViNmIxODRhNTllLkhpc3RvcmljYWwrPEdldFJhd0FzeW5jPmRfXzIA
AEkBAERTVF9mNTliOTUxNjIwODI0YmM5OTc1ZmE1YjZiMTg0YTU5ZS5IaXN0b3JpY2FsKzxQYXJz
ZVByaWNlQXN5bmM+ZF9fMwAARwEAQlNUX2Y1OWI5NTE2MjA4MjRiYzk5NzVmYTViNmIxODRhNTll
Lkhpc3RvcmljYWwrPFBhcnNlRGl2QXN5bmM+ZF9fNAAATwEASlNUX2Y1OWI5NTE2MjA4MjRiYzk5
NzVmYTViNmIxODRhNTllLlNjcmlwdE1haW4rPEdldFJhd0hpc3RvcmljYWxQcmljZT5kX18xAABI
AQBDU1RfZjU5Yjk1MTYyMDgyNGJjOTk3NWZhNWI2YjE4NGE1OWUuU2NyaXB0TWFpbis8V3JpdGVU
ZXh0QXN5bmM+ZF9fMgAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADcaAAAAAAAAAAAAAD2aAAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA6GgAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA
AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAaBAAAAAAAAAAAAAAaBDQAAABW
AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAGYiJGQAAAQAZiIkZ
PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA
AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcA
RgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBl
AG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYA
aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBmADUAOQBiADkANQAxADYAMgAw
ADgAMgA0AGIAYwA5ADkANwA1AGYAYQA1AGIANgBiADEAOAA0AGEANQA5AGUAAAA+AA8AAQBGAGkA
bABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA1ADMANwAuADMANAA4ADQAMQAAAAAAcAAo
AAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBmADUAOQBiADkANQAxADYAMgAwADgA
MgA0AGIAYwA5ADkANwA1AGYAYQA1AGIANgBiADEAOAA0AGEANQA5AGUALgBkAGwAbAAAAEgAEgAB
AEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAA
MgAwADEANwAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGYANQA5AGIAOQA1ADEA
NgAyADAAOAAyADQAYgBjADkAOQA3ADUAZgBhADUAYgA2AGIAMQA4ADQAYQA1ADkAZQAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBmADUAOQBiADkANQAxADYA
MgAwADgAMgA0AGIAYwA5ADkANwA1AGYAYQA1AGIANgBiADEAOAA0AGEANQA5AGUAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANQAzADcALgAzADQAOAA0ADEA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANQAz
ADcALgAzADQAOAA0ADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABgAAAMAAAACDkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{CFD9A3E2-1879-4D5A-AB2F-AD6A7A64ACF6}"
          DTS:ObjectName="{CFD9A3E2-1879-4D5A-AB2F-AD6A7A64ACF6}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::Symbol" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{9D27112C-7927-462E-A920-02AC5E623929}"
      DTS:From="Package\Execute SQL Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="165,42"
          Id="Package\Execute SQL Task"
          TopLeft="254,88" />
        <NodeLayout
          Size="133,42"
          Id="Package\Foreach Loop Container\Script Task"
          TopLeft="89,33" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="369,226"
          Size="369,269"
          Id="Package\Foreach Loop Container"
          TopLeft="246,176" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="336.5,130">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="94,46"
              Start="0,0"
              End="94,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19"
                    Point2="0,23"
                    Point3="4,23" />
                  <mssgle:LineSegment
                    End="90,23" />
                  <mssgle:CubicBezierSegment
                    Point1="90,23"
                    Point2="94,23"
                    Point3="94,27" />
                  <mssgle:LineSegment
                    End="94,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>